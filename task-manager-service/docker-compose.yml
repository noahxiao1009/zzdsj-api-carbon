version: '3.8'

services:
  # 任务管理服务
  task-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-manager-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=zzdsj_demo
      - DATABASE_PASSWORD=zzdsj123
      - DATABASE_DATABASE=zzdsj_demo
      - DATABASE_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - WORKER_POOL_SIZE=10
      - MAX_CONCURRENT_TASKS=50
      - TASK_TIMEOUT=5m
    depends_on:
      - postgres
      - redis
    networks:
      - task-manager-network
    restart: unless-stopped
    volumes:
      - ./logs:/var/log
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: task-manager-postgres
    environment:
      - POSTGRES_DB=zzdsj_demo
      - POSTGRES_USER=zzdsj_demo
      - POSTGRES_PASSWORD=zzdsj123
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - task-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zzdsj_demo -d zzdsj_demo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: task-manager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - task-manager-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: task-manager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - task-manager-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 可视化 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: task-manager-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - task-manager-network
    restart: unless-stopped
    depends_on:
      - prometheus

# 网络配置
networks:
  task-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local