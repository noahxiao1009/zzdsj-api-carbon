# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import task_manager_pb2 as task__manager__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in task_manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskManagerServiceStub(object):
    """任务管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/task_manager.TaskManagerService/SubmitTask',
                request_serializer=task__manager__pb2.TaskSubmitRequest.SerializeToString,
                response_deserializer=task__manager__pb2.TaskSubmitResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/task_manager.TaskManagerService/GetTaskStatus',
                request_serializer=task__manager__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=task__manager__pb2.TaskStatusResponse.FromString,
                _registered_method=True)
        self.SubmitBatchTasks = channel.unary_unary(
                '/task_manager.TaskManagerService/SubmitBatchTasks',
                request_serializer=task__manager__pb2.BatchTaskSubmitRequest.SerializeToString,
                response_deserializer=task__manager__pb2.BatchTaskSubmitResponse.FromString,
                _registered_method=True)
        self.WatchTaskStatus = channel.unary_stream(
                '/task_manager.TaskManagerService/WatchTaskStatus',
                request_serializer=task__manager__pb2.TaskWatchRequest.SerializeToString,
                response_deserializer=task__manager__pb2.TaskStatusUpdate.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/task_manager.TaskManagerService/CancelTask',
                request_serializer=task__manager__pb2.TaskCancelRequest.SerializeToString,
                response_deserializer=task__manager__pb2.TaskCancelResponse.FromString,
                _registered_method=True)
        self.ListTasks = channel.unary_unary(
                '/task_manager.TaskManagerService/ListTasks',
                request_serializer=task__manager__pb2.TaskListRequest.SerializeToString,
                response_deserializer=task__manager__pb2.TaskListResponse.FromString,
                _registered_method=True)


class TaskManagerServiceServicer(object):
    """任务管理服务
    """

    def SubmitTask(self, request, context):
        """提交任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """查询任务状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitBatchTasks(self, request, context):
        """批量提交任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchTaskStatus(self, request, context):
        """任务状态流式监听
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """取消任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """获取任务列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=task__manager__pb2.TaskSubmitRequest.FromString,
                    response_serializer=task__manager__pb2.TaskSubmitResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=task__manager__pb2.TaskStatusRequest.FromString,
                    response_serializer=task__manager__pb2.TaskStatusResponse.SerializeToString,
            ),
            'SubmitBatchTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitBatchTasks,
                    request_deserializer=task__manager__pb2.BatchTaskSubmitRequest.FromString,
                    response_serializer=task__manager__pb2.BatchTaskSubmitResponse.SerializeToString,
            ),
            'WatchTaskStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchTaskStatus,
                    request_deserializer=task__manager__pb2.TaskWatchRequest.FromString,
                    response_serializer=task__manager__pb2.TaskStatusUpdate.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=task__manager__pb2.TaskCancelRequest.FromString,
                    response_serializer=task__manager__pb2.TaskCancelResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=task__manager__pb2.TaskListRequest.FromString,
                    response_serializer=task__manager__pb2.TaskListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'task_manager.TaskManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('task_manager.TaskManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskManagerService(object):
    """任务管理服务
    """

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/task_manager.TaskManagerService/SubmitTask',
            task__manager__pb2.TaskSubmitRequest.SerializeToString,
            task__manager__pb2.TaskSubmitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/task_manager.TaskManagerService/GetTaskStatus',
            task__manager__pb2.TaskStatusRequest.SerializeToString,
            task__manager__pb2.TaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitBatchTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/task_manager.TaskManagerService/SubmitBatchTasks',
            task__manager__pb2.BatchTaskSubmitRequest.SerializeToString,
            task__manager__pb2.BatchTaskSubmitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/task_manager.TaskManagerService/WatchTaskStatus',
            task__manager__pb2.TaskWatchRequest.SerializeToString,
            task__manager__pb2.TaskStatusUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/task_manager.TaskManagerService/CancelTask',
            task__manager__pb2.TaskCancelRequest.SerializeToString,
            task__manager__pb2.TaskCancelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/task_manager.TaskManagerService/ListTasks',
            task__manager__pb2.TaskListRequest.SerializeToString,
            task__manager__pb2.TaskListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
