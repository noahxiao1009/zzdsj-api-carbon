// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: task_manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerServiceClient is the client API for TaskManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerServiceClient interface {
	// 提交任务
	SubmitTask(ctx context.Context, in *TaskSubmitRequest, opts ...grpc.CallOption) (*TaskSubmitResponse, error)
	// 查询任务状态
	GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error)
	// 批量提交任务
	SubmitBatchTasks(ctx context.Context, in *BatchTaskSubmitRequest, opts ...grpc.CallOption) (*BatchTaskSubmitResponse, error)
	// 任务状态流式监听
	WatchTaskStatus(ctx context.Context, in *TaskWatchRequest, opts ...grpc.CallOption) (TaskManagerService_WatchTaskStatusClient, error)
	// 取消任务
	CancelTask(ctx context.Context, in *TaskCancelRequest, opts ...grpc.CallOption) (*TaskCancelResponse, error)
	// 获取任务列表
	ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
}

type taskManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerServiceClient(cc grpc.ClientConnInterface) TaskManagerServiceClient {
	return &taskManagerServiceClient{cc}
}

func (c *taskManagerServiceClient) SubmitTask(ctx context.Context, in *TaskSubmitRequest, opts ...grpc.CallOption) (*TaskSubmitResponse, error) {
	out := new(TaskSubmitResponse)
	err := c.cc.Invoke(ctx, "/task_manager.TaskManagerService/SubmitTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerServiceClient) GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error) {
	out := new(TaskStatusResponse)
	err := c.cc.Invoke(ctx, "/task_manager.TaskManagerService/GetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerServiceClient) SubmitBatchTasks(ctx context.Context, in *BatchTaskSubmitRequest, opts ...grpc.CallOption) (*BatchTaskSubmitResponse, error) {
	out := new(BatchTaskSubmitResponse)
	err := c.cc.Invoke(ctx, "/task_manager.TaskManagerService/SubmitBatchTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerServiceClient) WatchTaskStatus(ctx context.Context, in *TaskWatchRequest, opts ...grpc.CallOption) (TaskManagerService_WatchTaskStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskManagerService_ServiceDesc.Streams[0], "/task_manager.TaskManagerService/WatchTaskStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerServiceWatchTaskStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManagerService_WatchTaskStatusClient interface {
	Recv() (*TaskStatusUpdate, error)
	grpc.ClientStream
}

type taskManagerServiceWatchTaskStatusClient struct {
	grpc.ClientStream
}

func (x *taskManagerServiceWatchTaskStatusClient) Recv() (*TaskStatusUpdate, error) {
	m := new(TaskStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagerServiceClient) CancelTask(ctx context.Context, in *TaskCancelRequest, opts ...grpc.CallOption) (*TaskCancelResponse, error) {
	out := new(TaskCancelResponse)
	err := c.cc.Invoke(ctx, "/task_manager.TaskManagerService/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerServiceClient) ListTasks(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/task_manager.TaskManagerService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServiceServer is the server API for TaskManagerService service.
// All implementations must embed UnimplementedTaskManagerServiceServer
// for forward compatibility
type TaskManagerServiceServer interface {
	// 提交任务
	SubmitTask(context.Context, *TaskSubmitRequest) (*TaskSubmitResponse, error)
	// 查询任务状态
	GetTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error)
	// 批量提交任务
	SubmitBatchTasks(context.Context, *BatchTaskSubmitRequest) (*BatchTaskSubmitResponse, error)
	// 任务状态流式监听
	WatchTaskStatus(*TaskWatchRequest, TaskManagerService_WatchTaskStatusServer) error
	// 取消任务
	CancelTask(context.Context, *TaskCancelRequest) (*TaskCancelResponse, error)
	// 获取任务列表
	ListTasks(context.Context, *TaskListRequest) (*TaskListResponse, error)
	mustEmbedUnimplementedTaskManagerServiceServer()
}

// UnimplementedTaskManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServiceServer struct {
}

func (UnimplementedTaskManagerServiceServer) SubmitTask(context.Context, *TaskSubmitRequest) (*TaskSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedTaskManagerServiceServer) GetTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedTaskManagerServiceServer) SubmitBatchTasks(context.Context, *BatchTaskSubmitRequest) (*BatchTaskSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatchTasks not implemented")
}
func (UnimplementedTaskManagerServiceServer) WatchTaskStatus(*TaskWatchRequest, TaskManagerService_WatchTaskStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTaskStatus not implemented")
}
func (UnimplementedTaskManagerServiceServer) CancelTask(context.Context, *TaskCancelRequest) (*TaskCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedTaskManagerServiceServer) ListTasks(context.Context, *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskManagerServiceServer) mustEmbedUnimplementedTaskManagerServiceServer() {}

// UnsafeTaskManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServiceServer will
// result in compilation errors.
type UnsafeTaskManagerServiceServer interface {
	mustEmbedUnimplementedTaskManagerServiceServer()
}

func RegisterTaskManagerServiceServer(s grpc.ServiceRegistrar, srv TaskManagerServiceServer) {
	s.RegisterService(&TaskManagerService_ServiceDesc, srv)
}

func _TaskManagerService_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_manager.TaskManagerService/SubmitTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).SubmitTask(ctx, req.(*TaskSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagerService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_manager.TaskManagerService/GetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).GetTaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagerService_SubmitBatchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTaskSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).SubmitBatchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_manager.TaskManagerService/SubmitBatchTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).SubmitBatchTasks(ctx, req.(*BatchTaskSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagerService_WatchTaskStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServiceServer).WatchTaskStatus(m, &taskManagerServiceWatchTaskStatusServer{stream})
}

type TaskManagerService_WatchTaskStatusServer interface {
	Send(*TaskStatusUpdate) error
	grpc.ServerStream
}

type taskManagerServiceWatchTaskStatusServer struct {
	grpc.ServerStream
}

func (x *taskManagerServiceWatchTaskStatusServer) Send(m *TaskStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskManagerService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_manager.TaskManagerService/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).CancelTask(ctx, req.(*TaskCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagerService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_manager.TaskManagerService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).ListTasks(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManagerService_ServiceDesc is the grpc.ServiceDesc for TaskManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task_manager.TaskManagerService",
	HandlerType: (*TaskManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _TaskManagerService_SubmitTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _TaskManagerService_GetTaskStatus_Handler,
		},
		{
			MethodName: "SubmitBatchTasks",
			Handler:    _TaskManagerService_SubmitBatchTasks_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _TaskManagerService_CancelTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskManagerService_ListTasks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTaskStatus",
			Handler:       _TaskManagerService_WatchTaskStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task_manager.proto",
}
