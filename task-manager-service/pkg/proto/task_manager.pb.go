// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: task_manager.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 任务提交请求
type TaskSubmitRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TaskType        string                 `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`                                                         // 任务类型 (document_processing, embedding_generation, vector_storage)
	ServiceName     string                 `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`                                                // 来源服务名
	KnowledgeBaseId string                 `protobuf:"bytes,3,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`                                  // 知识库ID
	Priority        string                 `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`                                                                         // 任务优先级 (high, medium, low)
	Payload         map[string]string      `protobuf:"bytes,5,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 任务载荷
	MaxRetries      int32                  `protobuf:"varint,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`                                                  // 最大重试次数
	TimeoutSeconds  int32                  `protobuf:"varint,7,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`                                      // 超时时间
	CallbackUrl     string                 `protobuf:"bytes,8,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`                                                // 回调URL
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskSubmitRequest) Reset() {
	*x = TaskSubmitRequest{}
	mi := &file_task_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubmitRequest) ProtoMessage() {}

func (x *TaskSubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSubmitRequest.ProtoReflect.Descriptor instead.
func (*TaskSubmitRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{0}
}

func (x *TaskSubmitRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskSubmitRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TaskSubmitRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *TaskSubmitRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TaskSubmitRequest) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TaskSubmitRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *TaskSubmitRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TaskSubmitRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

// 任务提交响应
type TaskSubmitResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TaskId              string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                         // 任务ID
	Status              string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                       // 任务状态
	Message             string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                                     // 响应消息
	CreatedAt           int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               // 创建时间戳
	EstimatedCompletion int64                  `protobuf:"varint,5,opt,name=estimated_completion,json=estimatedCompletion,proto3" json:"estimated_completion,omitempty"` // 预计完成时间
	QueueName           string                 `protobuf:"bytes,6,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`                                // 队列名称
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TaskSubmitResponse) Reset() {
	*x = TaskSubmitResponse{}
	mi := &file_task_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubmitResponse) ProtoMessage() {}

func (x *TaskSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSubmitResponse.ProtoReflect.Descriptor instead.
func (*TaskSubmitResponse) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{1}
}

func (x *TaskSubmitResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskSubmitResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskSubmitResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskSubmitResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskSubmitResponse) GetEstimatedCompletion() int64 {
	if x != nil {
		return x.EstimatedCompletion
	}
	return 0
}

func (x *TaskSubmitResponse) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

// 任务状态查询请求
type TaskStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 任务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusRequest) Reset() {
	*x = TaskStatusRequest{}
	mi := &file_task_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusRequest) ProtoMessage() {}

func (x *TaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusRequest.ProtoReflect.Descriptor instead.
func (*TaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{2}
}

func (x *TaskStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 任务状态响应
type TaskStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                 // 任务ID
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                               // 状态 (pending, processing, completed, failed, cancelled)
	Progress      int32                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`                                                                          // 进度百分比
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                                                             // 状态消息
	ErrorMessage  string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                               // 错误信息
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                       // 创建时间戳
	StartedAt     int64                  `protobuf:"varint,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`                                                       // 开始时间戳
	CompletedAt   int64                  `protobuf:"varint,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                                                 // 完成时间戳
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 任务元数据
	WorkerId      string                 `protobuf:"bytes,10,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`                                                          // 工作节点ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusResponse) Reset() {
	*x = TaskStatusResponse{}
	mi := &file_task_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusResponse) ProtoMessage() {}

func (x *TaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusResponse.ProtoReflect.Descriptor instead.
func (*TaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{3}
}

func (x *TaskStatusResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskStatusResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TaskStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TaskStatusResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskStatusResponse) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TaskStatusResponse) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *TaskStatusResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskStatusResponse) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

// 批量任务提交请求
type BatchTaskSubmitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`             // 批次ID
	Tasks         []*TaskSubmitRequest   `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`                                // 任务列表
	WaitForAll    bool                   `protobuf:"varint,3,opt,name=wait_for_all,json=waitForAll,proto3" json:"wait_for_all,omitempty"` // 是否等待所有任务完成
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchTaskSubmitRequest) Reset() {
	*x = BatchTaskSubmitRequest{}
	mi := &file_task_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchTaskSubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTaskSubmitRequest) ProtoMessage() {}

func (x *BatchTaskSubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTaskSubmitRequest.ProtoReflect.Descriptor instead.
func (*BatchTaskSubmitRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{4}
}

func (x *BatchTaskSubmitRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchTaskSubmitRequest) GetTasks() []*TaskSubmitRequest {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BatchTaskSubmitRequest) GetWaitForAll() bool {
	if x != nil {
		return x.WaitForAll
	}
	return false
}

// 批量任务提交响应
type BatchTaskSubmitResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BatchId        string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`                       // 批次ID
	Responses      []*TaskSubmitResponse  `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`                                  // 响应列表
	TotalCount     int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`             // 总任务数
	SubmittedCount int32                  `protobuf:"varint,4,opt,name=submitted_count,json=submittedCount,proto3" json:"submitted_count,omitempty"` // 已提交数
	FailedCount    int32                  `protobuf:"varint,5,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`          // 提交失败数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchTaskSubmitResponse) Reset() {
	*x = BatchTaskSubmitResponse{}
	mi := &file_task_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchTaskSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTaskSubmitResponse) ProtoMessage() {}

func (x *BatchTaskSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTaskSubmitResponse.ProtoReflect.Descriptor instead.
func (*BatchTaskSubmitResponse) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{5}
}

func (x *BatchTaskSubmitResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchTaskSubmitResponse) GetResponses() []*TaskSubmitResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchTaskSubmitResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *BatchTaskSubmitResponse) GetSubmittedCount() int32 {
	if x != nil {
		return x.SubmittedCount
	}
	return 0
}

func (x *BatchTaskSubmitResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

// 任务监听请求
type TaskWatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                 // 任务ID
	BatchId       string                 `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`              // 批次ID (可选)
	IncludeLogs   bool                   `protobuf:"varint,3,opt,name=include_logs,json=includeLogs,proto3" json:"include_logs,omitempty"` // 是否包含日志
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskWatchRequest) Reset() {
	*x = TaskWatchRequest{}
	mi := &file_task_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskWatchRequest) ProtoMessage() {}

func (x *TaskWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskWatchRequest.ProtoReflect.Descriptor instead.
func (*TaskWatchRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{6}
}

func (x *TaskWatchRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskWatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *TaskWatchRequest) GetIncludeLogs() bool {
	if x != nil {
		return x.IncludeLogs
	}
	return false
}

// 任务状态更新
type TaskStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                 // 任务ID
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                               // 最新状态
	Progress      int32                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`                                                                          // 进度百分比
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                                                             // 状态消息
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                        // 时间戳
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据
	Logs          []string               `protobuf:"bytes,7,rep,name=logs,proto3" json:"logs,omitempty"`                                                                                   // 日志信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusUpdate) Reset() {
	*x = TaskStatusUpdate{}
	mi := &file_task_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusUpdate) ProtoMessage() {}

func (x *TaskStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskStatusUpdate) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{7}
}

func (x *TaskStatusUpdate) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskStatusUpdate) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TaskStatusUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskStatusUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TaskStatusUpdate) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskStatusUpdate) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

// 任务取消请求
type TaskCancelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 任务ID
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`               // 取消原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCancelRequest) Reset() {
	*x = TaskCancelRequest{}
	mi := &file_task_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCancelRequest) ProtoMessage() {}

func (x *TaskCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCancelRequest.ProtoReflect.Descriptor instead.
func (*TaskCancelRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{8}
}

func (x *TaskCancelRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskCancelRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 任务取消响应
type TaskCancelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                 // 任务ID
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                            // 是否成功
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                             // 响应消息
	CancelledAt   int64                  `protobuf:"varint,4,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"` // 取消时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCancelResponse) Reset() {
	*x = TaskCancelResponse{}
	mi := &file_task_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCancelResponse) ProtoMessage() {}

func (x *TaskCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCancelResponse.ProtoReflect.Descriptor instead.
func (*TaskCancelResponse) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{9}
}

func (x *TaskCancelResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskCancelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TaskCancelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskCancelResponse) GetCancelledAt() int64 {
	if x != nil {
		return x.CancelledAt
	}
	return 0
}

// 任务列表查询请求
type TaskListRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TaskTypes       []string               `protobuf:"bytes,1,rep,name=task_types,json=taskTypes,proto3" json:"task_types,omitempty"`                     // 任务类型过滤
	Statuses        []string               `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`                                        // 状态过滤
	KnowledgeBaseId string                 `protobuf:"bytes,3,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID过滤
	Limit           int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                             // 限制数量
	Offset          int32                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`                                           // 偏移量
	SortBy          string                 `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                              // 排序字段
	SortOrder       string                 `protobuf:"bytes,7,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                     // 排序顺序 (asc, desc)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	mi := &file_task_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{10}
}

func (x *TaskListRequest) GetTaskTypes() []string {
	if x != nil {
		return x.TaskTypes
	}
	return nil
}

func (x *TaskListRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *TaskListRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *TaskListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TaskListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaskListRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *TaskListRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

// 任务列表响应
type TaskListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*TaskStatusResponse  `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`                              // 任务列表
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                             // 限制数量
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                           // 偏移量
	HasMore       bool                   `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`          // 是否有更多
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskListResponse) Reset() {
	*x = TaskListResponse{}
	mi := &file_task_manager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResponse) ProtoMessage() {}

func (x *TaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_manager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResponse.ProtoReflect.Descriptor instead.
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return file_task_manager_proto_rawDescGZIP(), []int{11}
}

func (x *TaskListResponse) GetTasks() []*TaskStatusResponse {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskListResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TaskListResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TaskListResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaskListResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

var File_task_manager_proto protoreflect.FileDescriptor

const file_task_manager_proto_rawDesc = "" +
	"\n" +
	"\x12task_manager.proto\x12\ftask_manager\"\x8c\x03\n" +
	"\x11TaskSubmitRequest\x12\x1b\n" +
	"\ttask_type\x18\x01 \x01(\tR\btaskType\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12*\n" +
	"\x11knowledge_base_id\x18\x03 \x01(\tR\x0fknowledgeBaseId\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\tR\bpriority\x12F\n" +
	"\apayload\x18\x05 \x03(\v2,.task_manager.TaskSubmitRequest.PayloadEntryR\apayload\x12\x1f\n" +
	"\vmax_retries\x18\x06 \x01(\x05R\n" +
	"maxRetries\x12'\n" +
	"\x0ftimeout_seconds\x18\a \x01(\x05R\x0etimeoutSeconds\x12!\n" +
	"\fcallback_url\x18\b \x01(\tR\vcallbackUrl\x1a:\n" +
	"\fPayloadEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd0\x01\n" +
	"\x12TaskSubmitResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\x03R\tcreatedAt\x121\n" +
	"\x14estimated_completion\x18\x05 \x01(\x03R\x13estimatedCompletion\x12\x1d\n" +
	"\n" +
	"queue_name\x18\x06 \x01(\tR\tqueueName\",\n" +
	"\x11TaskStatusRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"\xa7\x03\n" +
	"\x12TaskStatusResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x05R\bprogress\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"started_at\x18\a \x01(\x03R\tstartedAt\x12!\n" +
	"\fcompleted_at\x18\b \x01(\x03R\vcompletedAt\x12J\n" +
	"\bmetadata\x18\t \x03(\v2..task_manager.TaskStatusResponse.MetadataEntryR\bmetadata\x12\x1b\n" +
	"\tworker_id\x18\n" +
	" \x01(\tR\bworkerId\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8c\x01\n" +
	"\x16BatchTaskSubmitRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x125\n" +
	"\x05tasks\x18\x02 \x03(\v2\x1f.task_manager.TaskSubmitRequestR\x05tasks\x12 \n" +
	"\fwait_for_all\x18\x03 \x01(\bR\n" +
	"waitForAll\"\xe1\x01\n" +
	"\x17BatchTaskSubmitResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12>\n" +
	"\tresponses\x18\x02 \x03(\v2 .task_manager.TaskSubmitResponseR\tresponses\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\x12'\n" +
	"\x0fsubmitted_count\x18\x04 \x01(\x05R\x0esubmittedCount\x12!\n" +
	"\ffailed_count\x18\x05 \x01(\x05R\vfailedCount\"i\n" +
	"\x10TaskWatchRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12!\n" +
	"\finclude_logs\x18\x03 \x01(\bR\vincludeLogs\"\xb2\x02\n" +
	"\x10TaskStatusUpdate\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x05R\bprogress\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12H\n" +
	"\bmetadata\x18\x06 \x03(\v2,.task_manager.TaskStatusUpdate.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04logs\x18\a \x03(\tR\x04logs\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"D\n" +
	"\x11TaskCancelRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x84\x01\n" +
	"\x12TaskCancelResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12!\n" +
	"\fcancelled_at\x18\x04 \x01(\x03R\vcancelledAt\"\xde\x01\n" +
	"\x0fTaskListRequest\x12\x1d\n" +
	"\n" +
	"task_types\x18\x01 \x03(\tR\ttaskTypes\x12\x1a\n" +
	"\bstatuses\x18\x02 \x03(\tR\bstatuses\x12*\n" +
	"\x11knowledge_base_id\x18\x03 \x01(\tR\x0fknowledgeBaseId\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x05R\x06offset\x12\x17\n" +
	"\asort_by\x18\x06 \x01(\tR\x06sortBy\x12\x1d\n" +
	"\n" +
	"sort_order\x18\a \x01(\tR\tsortOrder\"\xb4\x01\n" +
	"\x10TaskListResponse\x126\n" +
	"\x05tasks\x18\x01 \x03(\v2 .task_manager.TaskStatusResponseR\x05tasks\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x05R\x06offset\x12\x19\n" +
	"\bhas_more\x18\x05 \x01(\bR\ahasMore2\x8c\x04\n" +
	"\x12TaskManagerService\x12O\n" +
	"\n" +
	"SubmitTask\x12\x1f.task_manager.TaskSubmitRequest\x1a .task_manager.TaskSubmitResponse\x12R\n" +
	"\rGetTaskStatus\x12\x1f.task_manager.TaskStatusRequest\x1a .task_manager.TaskStatusResponse\x12_\n" +
	"\x10SubmitBatchTasks\x12$.task_manager.BatchTaskSubmitRequest\x1a%.task_manager.BatchTaskSubmitResponse\x12S\n" +
	"\x0fWatchTaskStatus\x12\x1e.task_manager.TaskWatchRequest\x1a\x1e.task_manager.TaskStatusUpdate0\x01\x12O\n" +
	"\n" +
	"CancelTask\x12\x1f.task_manager.TaskCancelRequest\x1a .task_manager.TaskCancelResponse\x12J\n" +
	"\tListTasks\x12\x1d.task_manager.TaskListRequest\x1a\x1e.task_manager.TaskListResponseB Z\x1etask-manager-service/pkg/protob\x06proto3"

var (
	file_task_manager_proto_rawDescOnce sync.Once
	file_task_manager_proto_rawDescData []byte
)

func file_task_manager_proto_rawDescGZIP() []byte {
	file_task_manager_proto_rawDescOnce.Do(func() {
		file_task_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_task_manager_proto_rawDesc), len(file_task_manager_proto_rawDesc)))
	})
	return file_task_manager_proto_rawDescData
}

var file_task_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_task_manager_proto_goTypes = []any{
	(*TaskSubmitRequest)(nil),       // 0: task_manager.TaskSubmitRequest
	(*TaskSubmitResponse)(nil),      // 1: task_manager.TaskSubmitResponse
	(*TaskStatusRequest)(nil),       // 2: task_manager.TaskStatusRequest
	(*TaskStatusResponse)(nil),      // 3: task_manager.TaskStatusResponse
	(*BatchTaskSubmitRequest)(nil),  // 4: task_manager.BatchTaskSubmitRequest
	(*BatchTaskSubmitResponse)(nil), // 5: task_manager.BatchTaskSubmitResponse
	(*TaskWatchRequest)(nil),        // 6: task_manager.TaskWatchRequest
	(*TaskStatusUpdate)(nil),        // 7: task_manager.TaskStatusUpdate
	(*TaskCancelRequest)(nil),       // 8: task_manager.TaskCancelRequest
	(*TaskCancelResponse)(nil),      // 9: task_manager.TaskCancelResponse
	(*TaskListRequest)(nil),         // 10: task_manager.TaskListRequest
	(*TaskListResponse)(nil),        // 11: task_manager.TaskListResponse
	nil,                             // 12: task_manager.TaskSubmitRequest.PayloadEntry
	nil,                             // 13: task_manager.TaskStatusResponse.MetadataEntry
	nil,                             // 14: task_manager.TaskStatusUpdate.MetadataEntry
}
var file_task_manager_proto_depIdxs = []int32{
	12, // 0: task_manager.TaskSubmitRequest.payload:type_name -> task_manager.TaskSubmitRequest.PayloadEntry
	13, // 1: task_manager.TaskStatusResponse.metadata:type_name -> task_manager.TaskStatusResponse.MetadataEntry
	0,  // 2: task_manager.BatchTaskSubmitRequest.tasks:type_name -> task_manager.TaskSubmitRequest
	1,  // 3: task_manager.BatchTaskSubmitResponse.responses:type_name -> task_manager.TaskSubmitResponse
	14, // 4: task_manager.TaskStatusUpdate.metadata:type_name -> task_manager.TaskStatusUpdate.MetadataEntry
	3,  // 5: task_manager.TaskListResponse.tasks:type_name -> task_manager.TaskStatusResponse
	0,  // 6: task_manager.TaskManagerService.SubmitTask:input_type -> task_manager.TaskSubmitRequest
	2,  // 7: task_manager.TaskManagerService.GetTaskStatus:input_type -> task_manager.TaskStatusRequest
	4,  // 8: task_manager.TaskManagerService.SubmitBatchTasks:input_type -> task_manager.BatchTaskSubmitRequest
	6,  // 9: task_manager.TaskManagerService.WatchTaskStatus:input_type -> task_manager.TaskWatchRequest
	8,  // 10: task_manager.TaskManagerService.CancelTask:input_type -> task_manager.TaskCancelRequest
	10, // 11: task_manager.TaskManagerService.ListTasks:input_type -> task_manager.TaskListRequest
	1,  // 12: task_manager.TaskManagerService.SubmitTask:output_type -> task_manager.TaskSubmitResponse
	3,  // 13: task_manager.TaskManagerService.GetTaskStatus:output_type -> task_manager.TaskStatusResponse
	5,  // 14: task_manager.TaskManagerService.SubmitBatchTasks:output_type -> task_manager.BatchTaskSubmitResponse
	7,  // 15: task_manager.TaskManagerService.WatchTaskStatus:output_type -> task_manager.TaskStatusUpdate
	9,  // 16: task_manager.TaskManagerService.CancelTask:output_type -> task_manager.TaskCancelResponse
	11, // 17: task_manager.TaskManagerService.ListTasks:output_type -> task_manager.TaskListResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_task_manager_proto_init() }
func file_task_manager_proto_init() {
	if File_task_manager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_task_manager_proto_rawDesc), len(file_task_manager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_manager_proto_goTypes,
		DependencyIndexes: file_task_manager_proto_depIdxs,
		MessageInfos:      file_task_manager_proto_msgTypes,
	}.Build()
	File_task_manager_proto = out.File
	file_task_manager_proto_goTypes = nil
	file_task_manager_proto_depIdxs = nil
}
