# Message Push Service Docker Compose
# SSE消息推送微服务完整部署配置

version: '3.8'

services:
  # SSE消息推送服务
  message-push-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: message-push-service
    ports:
      - "8089:8089"
    environment:
      # 服务配置
      - SERVICE_NAME=message-push-service
      - SERVICE_PORT=8089
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=5
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_MAX_CONNECTIONS=20
      
      # 日志配置
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - LOG_FILE=/app/logs/message-push-service.log
      
      # 性能配置
      - MAX_CONNECTIONS=1000
      - CONNECTION_TIMEOUT=300
      - HEARTBEAT_INTERVAL=30
      - MESSAGE_QUEUE_SIZE=10000
      
      # 监控配置
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    networks:
      - message-push-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/sse/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis消息队列
  redis:
    image: redis:7-alpine
    container_name: message-push-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - message-push-network
    restart: unless-stopped
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server /usr/local/etc/redis/redis.conf --requirepass $$REDIS_PASSWORD
        else
          redis-server /usr/local/etc/redis/redis.conf
        fi
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Nginx反向代理(可选)
  nginx:
    image: nginx:alpine
    container_name: message-push-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - message-push-service
    networks:
      - message-push-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 64M

  # Prometheus监控(可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: message-push-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - message-push-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana可视化(可选)
  grafana:
    image: grafana/grafana:latest
    container_name: message-push-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - message-push-network
    restart: unless-stopped

networks:
  message-push-network:
    driver: bridge
    name: message-push-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local