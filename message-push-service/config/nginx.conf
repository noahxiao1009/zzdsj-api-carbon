# Nginx配置文件
# Message Push Service反向代理和负载均衡配置

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    log_format sse_log '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # 上游服务器配置
    upstream message_push_backend {
        least_conn;
        server message-push-service:8089 max_fails=3 fail_timeout=30s;
        # 如需负载均衡，添加更多实例:
        # server message-push-service-2:8089 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name localhost;
        
        # 访问日志
        access_log /var/log/nginx/message-push-access.log sse_log;
        error_log /var/log/nginx/message-push-error.log;

        # 通用代理设置
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # 超时设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;

        # 缓冲设置
        proxy_buffering off;
        proxy_cache off;

        # SSE特定配置
        location /sse/ {
            proxy_pass http://message_push_backend;
            
            # SSE关键配置
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
            
            # 超时配置 - SSE连接需要长时间保持
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 86400s; # 24小时
            
            # 头部配置
            proxy_set_header Accept "text/event-stream";
            proxy_set_header Cache-Control "no-cache";
            
            # 错误处理
            proxy_intercept_errors off;
            
            # 访问控制
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cache-Control";
            add_header Access-Control-Allow-Credentials true;
            
            # OPTIONS请求处理
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cache-Control";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # API路由
        location /api/ {
            proxy_pass http://message_push_backend;
            
            # API特定配置
            proxy_set_header Connection "keep-alive";
            proxy_buffering on;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
        }

        # 健康检查
        location /health {
            proxy_pass http://message_push_backend/sse/health;
            access_log off;
        }

        # 根路径
        location / {
            proxy_pass http://message_push_backend;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS配置 (可选)
    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL证书配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 其他配置与HTTP相同
        include /etc/nginx/conf.d/message-push-common.conf;
    }

    # 状态监控页面
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}